// <auto-generated />
using System;
using Clip.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Clip.Migrations
{
    [DbContext(typeof(billetera_virtualContext))]
    [Migration("20201118034136_update-id")]
    partial class updateid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Clip.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("idCliente");

                    b.Property<string>("Apellido")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("apellido");

                    b.Property<string>("Cvu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cvu");

                    b.Property<string>("Email")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("email");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<byte[]>("FrontalDni")
                        .HasColumnType("image")
                        .HasColumnName("frontalDNI");

                    b.Property<int?>("IdDireccion")
                        .HasColumnType("int")
                        .HasColumnName("idDireccion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("NroDni")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("nroDNI")
                        .IsFixedLength(true);

                    b.Property<string>("NroTelefono")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nroTelefono");

                    b.Property<byte[]>("TraseraDni")
                        .HasColumnType("image")
                        .HasColumnName("traseraDNI");

                    b.HasKey("IdCliente");

                    b.HasIndex("IdDireccion");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Clip.Models.Cuentum", b =>
                {
                    b.Property<int>("IdCuenta")
                        .HasColumnType("int")
                        .HasColumnName("idCuenta");

                    b.Property<string>("Cvu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cvu");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("date")
                        .HasColumnName("fechaAlta");

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("idCliente");

                    b.Property<int?>("IdEntidadBancaria")
                        .HasColumnType("int")
                        .HasColumnName("idEntidadBancaria");

                    b.Property<int?>("IdTipoMoneda")
                        .HasColumnType("int")
                        .HasColumnName("idTipoMoneda");

                    b.Property<decimal?>("Saldo")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("saldo");

                    b.Property<decimal?>("TopeDescubierto")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("topeDescubierto");

                    b.HasKey("IdCuenta");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdEntidadBancaria");

                    b.HasIndex("IdTipoMoneda");

                    b.ToTable("Cuenta");
                });

            modelBuilder.Entity("Clip.Models.DetalleFactura", b =>
                {
                    b.Property<int>("IdDetalleFactura")
                        .HasColumnType("int")
                        .HasColumnName("idDetalleFactura");

                    b.Property<int?>("IdFactura")
                        .HasColumnType("int")
                        .HasColumnName("idFactura");

                    b.Property<int?>("IdServicio")
                        .HasColumnType("int")
                        .HasColumnName("idServicio");

                    b.Property<string>("SubTotal")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("subTotal")
                        .IsFixedLength(true);

                    b.HasKey("IdDetalleFactura");

                    b.HasIndex("IdServicio");

                    b.ToTable("DetalleFactura");
                });

            modelBuilder.Entity("Clip.Models.Direccion", b =>
                {
                    b.Property<int>("IdDireccion")
                        .HasColumnType("int")
                        .HasColumnName("idDireccion");

                    b.Property<string>("Calle")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("calle")
                        .IsFixedLength(true);

                    b.Property<int?>("IdLocalidad")
                        .HasColumnType("int")
                        .HasColumnName("idLocalidad");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("numero")
                        .IsFixedLength(true);

                    b.HasKey("IdDireccion");

                    b.HasIndex("IdLocalidad");

                    b.ToTable("Direccion");
                });

            modelBuilder.Entity("Clip.Models.EntidadBancarium", b =>
                {
                    b.Property<int>("IdEntidadBancaria")
                        .HasColumnType("int")
                        .HasColumnName("idEntidadBancaria");

                    b.Property<int?>("IdDireccion")
                        .HasColumnType("int")
                        .HasColumnName("idDireccion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("nombre")
                        .IsFixedLength(true);

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("razonSocial")
                        .IsFixedLength(true);

                    b.HasKey("IdEntidadBancaria");

                    b.ToTable("Entidad_Bancaria");
                });

            modelBuilder.Entity("Clip.Models.Factura", b =>
                {
                    b.Property<int>("IdFactura")
                        .HasColumnType("int")
                        .HasColumnName("idFactura");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaElaboracion")
                        .HasColumnType("date")
                        .HasColumnName("fechaElaboracion");

                    b.Property<string>("FechaVencimiento")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("fechaVencimiento")
                        .IsFixedLength(true);

                    b.Property<decimal?>("Total")
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("total");

                    b.HasKey("IdFactura");

                    b.ToTable("Factura");
                });

            modelBuilder.Entity("Clip.Models.Inversion", b =>
                {
                    b.Property<int>("IdInversion")
                        .HasColumnType("int")
                        .HasColumnName("idInversion");

                    b.Property<int?>("CantidadDias")
                        .HasColumnType("int")
                        .HasColumnName("cantidadDias");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("date")
                        .HasColumnName("fechaInicio");

                    b.Property<int?>("IdCuenta")
                        .HasColumnType("int")
                        .HasColumnName("idCuenta");

                    b.Property<int?>("IdTipoInversion")
                        .HasColumnType("int")
                        .HasColumnName("idTipoInversion");

                    b.Property<decimal?>("MontoInicial")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("montoInicial");

                    b.HasKey("IdInversion");

                    b.HasIndex("IdCuenta");

                    b.ToTable("Inversion");
                });

            modelBuilder.Entity("Clip.Models.Localidad", b =>
                {
                    b.Property<int>("IdLocalidad")
                        .HasColumnType("int")
                        .HasColumnName("idLocalidad");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("codigoPostal")
                        .IsFixedLength(true);

                    b.Property<int?>("IdProvincia")
                        .HasColumnType("int")
                        .HasColumnName("idProvincia");

                    b.Property<string>("Nombre")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("nombre")
                        .IsFixedLength(true);

                    b.HasKey("IdLocalidad");

                    b.HasIndex("IdProvincia");

                    b.ToTable("Localidad");
                });

            modelBuilder.Entity("Clip.Models.Operacion", b =>
                {
                    b.Property<int>("IdOperacion")
                        .HasColumnType("int")
                        .HasColumnName("idOperacion");

                    b.Property<string>("Estado")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("estado")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("FechaOperacion")
                        .HasColumnType("date")
                        .HasColumnName("fechaOperacion");

                    b.Property<string>("HoraOperacion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("horaOperacion")
                        .IsFixedLength(true);

                    b.Property<int?>("IdCuenta")
                        .HasColumnType("int")
                        .HasColumnName("idCuenta");

                    b.Property<int?>("IdTipoOperacion")
                        .HasColumnType("int")
                        .HasColumnName("idTipoOperacion");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("monto");

                    b.Property<string>("NroOperacion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("nroOperacion")
                        .IsFixedLength(true);

                    b.HasKey("IdOperacion");

                    b.HasIndex("IdCuenta");

                    b.ToTable("Operacion");
                });

            modelBuilder.Entity("Clip.Models.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .HasColumnType("int")
                        .HasColumnName("idPago");

                    b.Property<int?>("CantCuotas")
                        .HasColumnType("int")
                        .HasColumnName("cantCuotas");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int?>("IdCuenta")
                        .HasColumnType("int")
                        .HasColumnName("idCuenta");

                    b.Property<int?>("IdFactura")
                        .HasColumnType("int")
                        .HasColumnName("idFactura");

                    b.Property<decimal?>("Total")
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("total");

                    b.HasKey("IdPago");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdFactura");

                    b.ToTable("Pago");
                });

            modelBuilder.Entity("Clip.Models.Provincium", b =>
                {
                    b.Property<int>("IdProvincia")
                        .HasColumnType("int")
                        .HasColumnName("idProvincia");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("descripcion")
                        .IsFixedLength(true);

                    b.Property<string>("Nombre")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("nombre")
                        .IsFixedLength(true);

                    b.HasKey("IdProvincia")
                        .HasName("PK_Estado");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("Clip.Models.Servicio", b =>
                {
                    b.Property<int>("IdServicio")
                        .HasColumnType("int")
                        .HasColumnName("idServicio");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("descripcion")
                        .IsFixedLength(true);

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<int?>("IdTipoServicio")
                        .HasColumnType("int")
                        .HasColumnName("idTipoServicio");

                    b.Property<string>("Nombre")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("nombre")
                        .IsFixedLength(true);

                    b.HasKey("IdServicio");

                    b.ToTable("Servicio");
                });

            modelBuilder.Entity("Clip.Models.TipoInversion", b =>
                {
                    b.Property<int>("IdTipoInversion")
                        .HasColumnType("int")
                        .HasColumnName("idTipoInversion");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("descripcion")
                        .IsFixedLength(true);

                    b.Property<string>("Nombre")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("nombre")
                        .IsFixedLength(true);

                    b.Property<decimal?>("Tasa")
                        .HasColumnType("numeric(2,2)")
                        .HasColumnName("tasa");

                    b.HasKey("IdTipoInversion");

                    b.ToTable("Tipo_Inversion");
                });

            modelBuilder.Entity("Clip.Models.TipoMonedum", b =>
                {
                    b.Property<int>("IdTipoMoneda")
                        .HasColumnType("int")
                        .HasColumnName("idTipoMoneda");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("descripcion")
                        .IsFixedLength(true);

                    b.Property<string>("Nombre")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("nombre")
                        .IsFixedLength(true);

                    b.Property<decimal?>("Valor")
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("valor");

                    b.HasKey("IdTipoMoneda");

                    b.ToTable("Tipo_Moneda");
                });

            modelBuilder.Entity("Clip.Models.TipoOperacion", b =>
                {
                    b.Property<int>("IdTipoOperacion")
                        .HasColumnType("int")
                        .HasColumnName("idTipoOperacion");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("descripcion")
                        .IsFixedLength(true);

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.Property<int?>("Tasa")
                        .HasColumnType("int")
                        .HasColumnName("tasa");

                    b.HasKey("IdTipoOperacion");

                    b.ToTable("Tipo_Operacion");
                });

            modelBuilder.Entity("Clip.Models.TipoServicio", b =>
                {
                    b.Property<int>("IdTipoServicio")
                        .HasColumnType("int")
                        .HasColumnName("idTipoServicio");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("descripcion")
                        .IsFixedLength(true);

                    b.Property<string>("Nombre")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("nombre")
                        .IsFixedLength(true);

                    b.HasKey("IdTipoServicio");

                    b.ToTable("Tipo_Servicio");
                });

            modelBuilder.Entity("Clip.Models.Transferencium", b =>
                {
                    b.Property<int>("IdTransferencia")
                        .HasColumnType("int")
                        .HasColumnName("idTransferencia");

                    b.Property<DateTime?>("FechaOperacion")
                        .HasColumnType("date")
                        .HasColumnName("fechaOperacion");

                    b.Property<string>("HoraOperacion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("horaOperacion")
                        .IsFixedLength(true);

                    b.Property<int?>("IdCuentaDestino")
                        .HasColumnType("int")
                        .HasColumnName("idCuentaDestino");

                    b.Property<int?>("IdCuentaOrigen")
                        .HasColumnType("int")
                        .HasColumnName("idCuentaOrigen");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("monto");

                    b.Property<string>("Motivo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("motivo")
                        .IsFixedLength(true);

                    b.HasKey("IdTransferencia");

                    b.HasIndex("IdCuentaDestino");

                    b.HasIndex("IdCuentaOrigen");

                    b.ToTable("Transferencia");
                });

            modelBuilder.Entity("Clip.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("date")
                        .HasColumnName("fechaAlta");

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("idCliente");

                    b.Property<string>("NombreUsuario")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("nombreUsuario")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("password");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdCliente");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Clip.Models.Cliente", b =>
                {
                    b.HasOne("Clip.Models.Direccion", "IdDireccionNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("IdDireccion")
                        .HasConstraintName("FK_Cliente_Direccion");

                    b.Navigation("IdDireccionNavigation");
                });

            modelBuilder.Entity("Clip.Models.Cuentum", b =>
                {
                    b.HasOne("Clip.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_Cuenta_Cliente");

                    b.HasOne("Clip.Models.EntidadBancarium", "IdEntidadBancariaNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdEntidadBancaria")
                        .HasConstraintName("FK_Cuenta_Entidad_Bancaria");

                    b.HasOne("Clip.Models.TipoMonedum", "IdTipoMonedaNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdTipoMoneda")
                        .HasConstraintName("FK_Cuenta_Tipo_Moneda");

                    b.Navigation("IdClienteNavigation");

                    b.Navigation("IdEntidadBancariaNavigation");

                    b.Navigation("IdTipoMonedaNavigation");
                });

            modelBuilder.Entity("Clip.Models.DetalleFactura", b =>
                {
                    b.HasOne("Clip.Models.Factura", "IdDetalleFacturaNavigation")
                        .WithOne("DetalleFactura")
                        .HasForeignKey("Clip.Models.DetalleFactura", "IdDetalleFactura")
                        .HasConstraintName("FK_DetalleFactura_Factura")
                        .IsRequired();

                    b.HasOne("Clip.Models.Servicio", "IdServicioNavigation")
                        .WithMany("DetalleFacturas")
                        .HasForeignKey("IdServicio")
                        .HasConstraintName("FK_DetalleFactura_Servicio");

                    b.Navigation("IdDetalleFacturaNavigation");

                    b.Navigation("IdServicioNavigation");
                });

            modelBuilder.Entity("Clip.Models.Direccion", b =>
                {
                    b.HasOne("Clip.Models.Localidad", "IdLocalidadNavigation")
                        .WithMany("Direccions")
                        .HasForeignKey("IdLocalidad")
                        .HasConstraintName("FK_Direccion_Localidad");

                    b.Navigation("IdLocalidadNavigation");
                });

            modelBuilder.Entity("Clip.Models.EntidadBancarium", b =>
                {
                    b.HasOne("Clip.Models.Direccion", "IdEntidadBancariaNavigation")
                        .WithOne("EntidadBancarium")
                        .HasForeignKey("Clip.Models.EntidadBancarium", "IdEntidadBancaria")
                        .HasConstraintName("FK_Entidad_Bancaria_Direccion")
                        .IsRequired();

                    b.Navigation("IdEntidadBancariaNavigation");
                });

            modelBuilder.Entity("Clip.Models.Inversion", b =>
                {
                    b.HasOne("Clip.Models.Cuentum", "IdCuentaNavigation")
                        .WithMany("Inversions")
                        .HasForeignKey("IdCuenta")
                        .HasConstraintName("FK_Inversion_Cuenta");

                    b.HasOne("Clip.Models.TipoInversion", "IdInversionNavigation")
                        .WithOne("Inversion")
                        .HasForeignKey("Clip.Models.Inversion", "IdInversion")
                        .HasConstraintName("FK_Inversion_Tipo_Inversion")
                        .IsRequired();

                    b.Navigation("IdCuentaNavigation");

                    b.Navigation("IdInversionNavigation");
                });

            modelBuilder.Entity("Clip.Models.Localidad", b =>
                {
                    b.HasOne("Clip.Models.Provincium", "IdProvinciaNavigation")
                        .WithMany("Localidads")
                        .HasForeignKey("IdProvincia")
                        .HasConstraintName("FK_Localidad_Provincia");

                    b.Navigation("IdProvinciaNavigation");
                });

            modelBuilder.Entity("Clip.Models.Operacion", b =>
                {
                    b.HasOne("Clip.Models.Cuentum", "IdCuentaNavigation")
                        .WithMany("Operacions")
                        .HasForeignKey("IdCuenta")
                        .HasConstraintName("FK_Operacion_Cuenta");

                    b.HasOne("Clip.Models.TipoOperacion", "IdOperacionNavigation")
                        .WithOne("Operacion")
                        .HasForeignKey("Clip.Models.Operacion", "IdOperacion")
                        .HasConstraintName("FK_Operacion_Tipo_Operacion")
                        .IsRequired();

                    b.Navigation("IdCuentaNavigation");

                    b.Navigation("IdOperacionNavigation");
                });

            modelBuilder.Entity("Clip.Models.Pago", b =>
                {
                    b.HasOne("Clip.Models.Cuentum", "IdCuentaNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdCuenta")
                        .HasConstraintName("FK_Pago_Cuenta");

                    b.HasOne("Clip.Models.Factura", "IdFacturaNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdFactura")
                        .HasConstraintName("FK_Pago_Factura");

                    b.Navigation("IdCuentaNavigation");

                    b.Navigation("IdFacturaNavigation");
                });

            modelBuilder.Entity("Clip.Models.Servicio", b =>
                {
                    b.HasOne("Clip.Models.TipoServicio", "IdServicioNavigation")
                        .WithOne("Servicio")
                        .HasForeignKey("Clip.Models.Servicio", "IdServicio")
                        .HasConstraintName("FK_Servicio_Tipo_Servicio")
                        .IsRequired();

                    b.Navigation("IdServicioNavigation");
                });

            modelBuilder.Entity("Clip.Models.Transferencium", b =>
                {
                    b.HasOne("Clip.Models.Cuentum", "IdCuentaDestinoNavigation")
                        .WithMany("TransferenciumIdCuentaDestinoNavigations")
                        .HasForeignKey("IdCuentaDestino")
                        .HasConstraintName("FK_Transferencia_CuentaDestino");

                    b.HasOne("Clip.Models.Cuentum", "IdCuentaOrigenNavigation")
                        .WithMany("TransferenciumIdCuentaOrigenNavigations")
                        .HasForeignKey("IdCuentaOrigen")
                        .HasConstraintName("FK_Transferencia_CuentaOrigin");

                    b.Navigation("IdCuentaDestinoNavigation");

                    b.Navigation("IdCuentaOrigenNavigation");
                });

            modelBuilder.Entity("Clip.Models.Usuario", b =>
                {
                    b.HasOne("Clip.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_Usuario_Cliente");

                    b.Navigation("IdClienteNavigation");
                });

            modelBuilder.Entity("Clip.Models.Cliente", b =>
                {
                    b.Navigation("Cuenta");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Clip.Models.Cuentum", b =>
                {
                    b.Navigation("Inversions");

                    b.Navigation("Operacions");

                    b.Navigation("Pagos");

                    b.Navigation("TransferenciumIdCuentaDestinoNavigations");

                    b.Navigation("TransferenciumIdCuentaOrigenNavigations");
                });

            modelBuilder.Entity("Clip.Models.Direccion", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("EntidadBancarium");
                });

            modelBuilder.Entity("Clip.Models.EntidadBancarium", b =>
                {
                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("Clip.Models.Factura", b =>
                {
                    b.Navigation("DetalleFactura");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Clip.Models.Localidad", b =>
                {
                    b.Navigation("Direccions");
                });

            modelBuilder.Entity("Clip.Models.Provincium", b =>
                {
                    b.Navigation("Localidads");
                });

            modelBuilder.Entity("Clip.Models.Servicio", b =>
                {
                    b.Navigation("DetalleFacturas");
                });

            modelBuilder.Entity("Clip.Models.TipoInversion", b =>
                {
                    b.Navigation("Inversion");
                });

            modelBuilder.Entity("Clip.Models.TipoMonedum", b =>
                {
                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("Clip.Models.TipoOperacion", b =>
                {
                    b.Navigation("Operacion");
                });

            modelBuilder.Entity("Clip.Models.TipoServicio", b =>
                {
                    b.Navigation("Servicio");
                });
#pragma warning restore 612, 618
        }
    }
}
